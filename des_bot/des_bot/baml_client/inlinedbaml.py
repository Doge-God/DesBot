# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT41NanoFast {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4.1-nano\"\n    api_key env.OPENAI_API_KEY\n    service_tier \"priority\"\n  }\n}\n\nclient<llm> MistralInstruct {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://192.168.137.24:11434/v1\"\n    model \"MistralInstruct16K\"\n    default_role \"system\"\n    allowed_roles [\"user\", \"assistant\", \"tool\", \"system\"]\n  }\n}\n\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.206.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "main_agent.baml": "class Message {\n    role \"user\" | \"assistant\" | \"tool\"\n    content string\n}\n\nclass ReplyTool {\n    action_name \"reply\" @stream.done  @description(#\"\n        to reply to the user with a message.\"#)\n    response string \n}\n\nclass BookActivityTool {\n    action_name \"book_activity\" @stream.done @description(#\"\n        book an activity for the user. Ensure the user agrees to book this activity, and that the activity is in the schedule.\n    \"#)\n    activity string @description(#\"\n        name of the activity to book\n    \"#)\n}\n\nclass StopTool {\n    action_name \"stop\" @description(#\"\n        when the user indicate clear intention to stop the conversation\n    \"#) @stream.done\n    response string @description(#\"\n        indicate clearly to the user that the conversation is stopping\n    \"#)\n}\n\nclass SuggestActivityTool {\n    action_name \"suggest_activity\" @stream.done @description(#\"\n        submit an activity suggestion to Oceania. Ensure the user agrees to sharing the suggestion before using this action\n    \"#)\n    description string \n}\n\nfunction PrelimAgent(messages: Message[], activities: string) -> (ReplyTool | StopTool | BookActivityTool | SuggestActivityTool) {\n    client MistralInstruct //GPT41NanoFast //MistralInstruct //CustomGPT4oMini //\"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n    prompt #\"\n        You are a helpful assistant for elders in a retirement village. \n\n        Only reply with given JSON format and never raw strings. \n        \"reply\" is the default action to respond to user.\n        Further information can be fetched with given actions.\n        Some actions interact with wider system at Oceania to provide further assistant, but ensure you have all relevant information before using them. If not, use \"reply\" to ask the user for required information.\n\n        Today's activities are:\n        {{activities}}\n\n        {{ ctx.output_format }}\n\n        Messages:\n        {{messages}}\n    \"#\n}\n\nfunction RespondAgent(messages: Message[]) -> (ReplyTool | StopTool) {\n    client MistralInstruct //GPT41NanoFast //MistralInstruct //CustomGPT4oMini //\"openai/gpt-4o\" // Set OPENAI\n    prompt #\"\n        You are a helpful assistant for elders in a retirement village. \n\n        Only reply with given JSON format and never raw strings. \n        \"reply\" is the default action to respond to user.\n\n        Messages:\n        {{messages}}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest ToolInteractionCheck {\n    functions [PrelimAgent]\n    args {\n        messages [\n            {\n                role \"user\"\n                content \"Hello, how are you?\"\n            },\n            {\n                role \"assistant\"\n                content \"I'm doing well, thank you! How can I assist you today?\"\n            },\n            {\n                role \"user\"\n                content \"What is the weather like today?\"\n            },\n            { \n                role \"tool\"\n                content \"Sunny. 32 Celsius.\"\n            }\n        ]\n        activities \"Bowling, 10am. Yoga, 2pm. Movie, 6pm.\"\n    }\n    @@assert ({{this.action_name == \"reply\"}})\n}\n\ntest FurtherInformationCheck {\n    functions [PrelimAgent]\n    args {\n        messages [\n            {\n                role \"user\"\n                content \"Can you book the activity this afternoon for me?\"\n            }\n        ]\n\n        activities \"Bowling, 10am. Yoga, 2pm. Movie, 6pm.\"\n    }\n    @@assert ({{this.action_name == \"reply\"}})\n}\n\ntest InvalidActivityCheck {\n    functions [PrelimAgent]\n    args {\n        messages [\n            {\n                role \"user\"\n                content \"Can you book the recycling workshop this afternoon for me?\"\n            }\n        ]\n\n        activities \"Bowling, 10am. Yoga, 2pm. Movie, 6pm.\"\n    }\n    @@assert ({{this.action_name == \"reply\"}})\n}\n\ntest BookCheck {\n    functions [PrelimAgent]\n    args {\n        messages [\n            {\n                role \"user\"\n                content \"Can you book the yoga class this afternoon for me?\"\n            },\n            {\n                role \"assistant\"\n                content \"Sure, could I confirm you would like me to book the class for the 2pm session?\"\n            },\n            {\n                role \"user\"\n                content \"Yes.\"\n            },\n        ]\n\n        activities \"Bowling, 10am. Yoga, 2pm. Movie, 6pm.\"\n    }\n    @@assert ({{this.action_name == \"book_activity\"}})\n}",
    "minimal_chat.baml": "// class Message {\n//     role \"user\" | \"assistant\"\n//     content string\n// }\n\n// class ReplyTool {\n//     action_name \"reply\" @stream.done  @description(#\"\n//         to reply to the user with a message.\"#)\n//     response string \n// }\n\n// class StopTool {\n//     action_name \"stop\" @description(#\"\n//         when the user indicate clear intention to stop the conversation\n//     \"#) @stream.done\n//     response string @description(#\"\n//         indicate clearly to the user that the conversation is stopping\n//     \"#)\n// }\n\n// class QueryPastConversationTool {\n//     action_name \"search_past_conversation\" @stream.done @description(#\"\n//         search past conversation with the user to get more information and relevant event.\n//     \"#)\n//     search_phrases string[] @description(#\"\n//         phrases to search for in the past conversation with user\n//     \"#)\n// }\n\n// //  Messages:\n// //         {% for message in messages %}\n// //            {{_.role(message.role)}}\n// //            {{message.content}}\n// //         {% endfor %}\n// //     If there is no proper action to comply, respond with reply and state the limitation clearly.\n\n// function MinimalChatAgent(messages: Message[]) -> (ReplyTool | StopTool) {\n//     client MistralInstruct //GPT41NanoFast //MistralInstruct //CustomGPT4oMini //\"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n//     prompt #\"\n//         You are a minimal chat agent. \n//         Only reply with given format and never raw strings. \n\n//         {{ ctx.output_format }}\n\n//         Messages:\n//         {{messages}}\n//     \"#\n// }\n\n// test SanityCheck {\n//     functions [MinimalChatAgent]\n//     args {\n//         messages [\n//             {\n//                 role \"user\"\n//                 content \"Hello, how are you?\"\n//             },\n//             {\n//                 role \"assistant\"\n//                 content \"I'm doing well, thank you! How can I assist you today?\"\n//             },\n//             {\n//                 role \"user\"\n//                 content \"What is the weather like today?\"\n//             }\n//         ]\n//     }\n//     @@assert ({{this.action_name == \"reply\"}})\n// }\n\n// test StopCheck {\n//     functions [MinimalChatAgent]\n//     args {\n//         messages [\n//             {\n//                 role \"user\"\n//                 content \"Hello, how are you?\"\n//             },\n//             {\n//                 role \"assistant\"\n//                 content \"I'm doing well, thank you! How can I assist you today?\"\n//             },\n//             {\n//                 role \"user\"\n//                 content \"Nothing, bye\"\n//             }\n//         ]\n//     }\n//     @@assert ( {{this.action_name == \"stop\"}})\n// }\n\n// test RobotStartCheck {\n//     functions [MinimalChatAgent]\n//     args {\n//         messages [\n//             {\n//                 role \"assistant\"\n//                 content \"Good morning. Today's weather is sunny with a high of 25 degrees Celsius. Would you like to hear more about the events?\"\n//             },\n//             {\n//                 role \"user\"\n//                 content \"No it's fine, but how are you doing today?\"\n//             }\n//         ]\n//     }\n//     @@assert ( {{this.action_name == \"reply\"}})\n// }\n\n// test AbilityHallucinationCheck {\n//     functions [MinimalChatAgent]\n//     args {\n//         messages [\n//             {\n//                 role \"user\"\n//                 content \"Give me an outline of today's news.\"\n//             }\n//         ]\n//     }\n//     @@assert ( {{this.action_name == \"reply\"}})\n// }",
    "tool_selector.baml": "class GetEventsTool {\n    action_name \"get_events\" @description(#\"\n        query Oceania for upcoming events for today\n    \"#) @stream.done\n}\n\nclass CheckPlantDataTool {\n    action_name \"check_plant_data\" @description(#\"\n        attempt to use onboard connection to check on soil moisture of\n        the plant\n    \"#) @stream.done\n}\n\nclass RecallTool {\n    action_name \"recall\" @description(#\"\n        recall from memory system to better inform the conversation\n    \"#) @stream.done\n    search_phrase string @description(#\"\n        short description of what information to search for.\n    \"#) @stream.done\n}\n\n\nfunction ToolSelectAgent(messages: Message[]) -> GetEventsTool|CheckPlantDataTool|RecallTool|false{\n    client GPT41NanoFast //MistralInstruct //CustomGPT4oMini //\"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n    prompt #\"\n        Determine if the user require using subsquent tools.\n        If enough information is present, or no tools are suitable, use false\n\n        {{ messages }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest SanityCheck {\n    functions [ToolSelectAgent]\n    args {\n        messages [\n            {\n                role \"user\"\n                content \"Hello, how are you?\"\n            },\n            {\n                role \"assistant\"\n                content \"I'm doing well, thank you! How can I assist you today?\"\n            },\n            {\n                role \"user\"\n                content \"What is the weather like today?\"\n            }\n        ]\n    }\n    // @@assert (())\n}",
    "transcript_parse.baml": "\n\nfunction DetectTranscriptionEnd(transcription: string) -> bool {\n    client MistralInstruct //CustomGPT4oMini //\"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n    prompt #\"\n        Is this a complete user message?\n\n        {{ transcription }}\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest SanityCheck {\n    functions [DetectTranscriptionEnd]\n    args {\n        transcription \"Hello, how are you?\"\n    }\n    @@assert ( {{this == true}})\n}",
}

def get_baml_files():
    return _file_map